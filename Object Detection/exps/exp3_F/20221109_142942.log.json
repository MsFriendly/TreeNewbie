{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Oct 21 2022, 23:50:54) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: /usr/lib/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0\nPyTorch: 1.11.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0\nOpenCV: 4.6.0\nMMCV: 1.5.2\nMMCV Compiler: GCC 11.2\nMMCV CUDA Compiler: 11.8\nMMDetection: 2.24.1+99ef625", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[6, 8, 12],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=2,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/1027data/annotations/ember_train_dataset.json',\n        img_prefix='data/1027data/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('tree', 'house')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/1027data/annotations/ember_val_dataset.json',\n        img_prefix='data/1027data/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('tree', 'house')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/1027data/annotations/ember_test_dataset.json',\n        img_prefix='data/1027data/test/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('tree', 'house')))\nevaluation = dict(interval=6, metric='bbox')\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=12)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('tree', 'house')\nsubdir = '1027data'\nexperiment = 'exp3_F'\nwork_dir = './exps/exp3_F'\ngpu_ids = [0]\nauto_resume = False\n", "seed": 886999839, "exp_name": "fasterRcnn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00025, "memory": 2978, "data_time": 0.04453, "loss_rpn_cls": 0.66525, "loss_rpn_bbox": 0.18144, "loss_cls": 0.50794, "acc": 79.52734, "loss_bbox": 0.05906, "loss": 1.41369, "time": 0.18044}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00052, "memory": 2978, "data_time": 0.04412, "loss_rpn_cls": 0.53675, "loss_rpn_bbox": 0.14819, "loss_cls": 0.53461, "acc": 80.29883, "loss_bbox": 0.66902, "loss": 1.88857, "time": 0.17568}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00079, "memory": 2994, "data_time": 0.04422, "loss_rpn_cls": 0.33157, "loss_rpn_bbox": 0.14328, "loss_cls": 0.4199, "acc": 82.60156, "loss_bbox": 0.66577, "loss": 1.56052, "time": 0.17853}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00106, "memory": 2994, "data_time": 0.04434, "loss_rpn_cls": 0.18863, "loss_rpn_bbox": 0.14017, "loss_cls": 0.39061, "acc": 83.28516, "loss_bbox": 0.52917, "loss": 1.24857, "time": 0.18019}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00133, "memory": 2994, "data_time": 0.04445, "loss_rpn_cls": 0.13309, "loss_rpn_bbox": 0.1349, "loss_cls": 0.38232, "acc": 83.72461, "loss_bbox": 0.48384, "loss": 1.13415, "time": 0.17776}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.0016, "memory": 2994, "data_time": 0.04402, "loss_rpn_cls": 0.1005, "loss_rpn_bbox": 0.13694, "loss_cls": 0.35663, "acc": 84.8125, "loss_bbox": 0.4482, "loss": 1.04227, "time": 0.17861}
{"mode": "val", "epoch": 6, "iter": 21, "lr": 0.00162, "bbox_mAP": 0.37, "bbox_mAP_50": 0.681, "bbox_mAP_75": 0.355, "bbox_mAP_s": 0.069, "bbox_mAP_m": 0.364, "bbox_mAP_l": 0.424, "bbox_mAP_copypaste": "0.370 0.681 0.355 0.069 0.364 0.424"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.00187, "memory": 2994, "data_time": 0.04437, "loss_rpn_cls": 0.0906, "loss_rpn_bbox": 0.12089, "loss_cls": 0.34727, "acc": 85.48438, "loss_bbox": 0.43899, "loss": 0.99774, "time": 0.17798}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.00214, "memory": 2994, "data_time": 0.04434, "loss_rpn_cls": 0.07508, "loss_rpn_bbox": 0.11556, "loss_cls": 0.34048, "acc": 85.90039, "loss_bbox": 0.42153, "loss": 0.95265, "time": 0.17685}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.00024, "memory": 2994, "data_time": 0.04455, "loss_rpn_cls": 0.06067, "loss_rpn_bbox": 0.09286, "loss_cls": 0.30158, "acc": 87.62305, "loss_bbox": 0.37596, "loss": 0.83107, "time": 0.17639}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.00025, "memory": 2994, "data_time": 0.04451, "loss_rpn_cls": 0.05542, "loss_rpn_bbox": 0.08731, "loss_cls": 0.29484, "acc": 87.82812, "loss_bbox": 0.36327, "loss": 0.80083, "time": 0.17497}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.00025, "memory": 2994, "data_time": 0.04458, "loss_rpn_cls": 0.04986, "loss_rpn_bbox": 0.08372, "loss_cls": 0.29078, "acc": 87.95703, "loss_bbox": 0.36145, "loss": 0.78581, "time": 0.17468}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.0443, "loss_rpn_cls": 0.04895, "loss_rpn_bbox": 0.0824, "loss_cls": 0.28497, "acc": 88.34961, "loss_bbox": 0.35265, "loss": 0.76897, "time": 0.1742}
{"mode": "val", "epoch": 12, "iter": 21, "lr": 3e-05, "bbox_mAP": 0.394, "bbox_mAP_50": 0.715, "bbox_mAP_75": 0.41, "bbox_mAP_s": 0.063, "bbox_mAP_m": 0.395, "bbox_mAP_l": 0.428, "bbox_mAP_copypaste": "0.394 0.715 0.410 0.063 0.395 0.428"}
{"mode": "train", "epoch": 13, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04405, "loss_rpn_cls": 0.04877, "loss_rpn_bbox": 0.08151, "loss_cls": 0.27663, "acc": 88.76562, "loss_bbox": 0.34561, "loss": 0.75253, "time": 0.17555}
{"mode": "train", "epoch": 14, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04471, "loss_rpn_cls": 0.04682, "loss_rpn_bbox": 0.07992, "loss_cls": 0.27923, "acc": 88.61523, "loss_bbox": 0.34838, "loss": 0.75435, "time": 0.17711}
{"mode": "train", "epoch": 15, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04432, "loss_rpn_cls": 0.04699, "loss_rpn_bbox": 0.08154, "loss_cls": 0.28243, "acc": 88.51172, "loss_bbox": 0.34823, "loss": 0.75919, "time": 0.17507}
{"mode": "train", "epoch": 16, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04434, "loss_rpn_cls": 0.04677, "loss_rpn_bbox": 0.08032, "loss_cls": 0.27935, "acc": 88.49414, "loss_bbox": 0.34935, "loss": 0.7558, "time": 0.17608}
{"mode": "train", "epoch": 17, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04432, "loss_rpn_cls": 0.04578, "loss_rpn_bbox": 0.0809, "loss_cls": 0.2795, "acc": 88.55469, "loss_bbox": 0.35214, "loss": 0.75831, "time": 0.17451}
{"mode": "train", "epoch": 18, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04465, "loss_rpn_cls": 0.04691, "loss_rpn_bbox": 0.08182, "loss_cls": 0.28079, "acc": 88.51953, "loss_bbox": 0.34831, "loss": 0.75783, "time": 0.17696}
{"mode": "val", "epoch": 18, "iter": 21, "lr": 3e-05, "bbox_mAP": 0.396, "bbox_mAP_50": 0.72, "bbox_mAP_75": 0.408, "bbox_mAP_s": 0.066, "bbox_mAP_m": 0.391, "bbox_mAP_l": 0.432, "bbox_mAP_copypaste": "0.396 0.720 0.408 0.066 0.391 0.432"}
{"mode": "train", "epoch": 19, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04433, "loss_rpn_cls": 0.04663, "loss_rpn_bbox": 0.08022, "loss_cls": 0.28122, "acc": 88.60156, "loss_bbox": 0.35003, "loss": 0.75809, "time": 0.17874}
{"mode": "train", "epoch": 20, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04469, "loss_rpn_cls": 0.04609, "loss_rpn_bbox": 0.07918, "loss_cls": 0.27291, "acc": 88.96484, "loss_bbox": 0.34233, "loss": 0.74051, "time": 0.17657}
{"mode": "train", "epoch": 21, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04499, "loss_rpn_cls": 0.04305, "loss_rpn_bbox": 0.07938, "loss_cls": 0.27287, "acc": 88.86523, "loss_bbox": 0.3442, "loss": 0.7395, "time": 0.18008}
{"mode": "train", "epoch": 22, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04443, "loss_rpn_cls": 0.04596, "loss_rpn_bbox": 0.08123, "loss_cls": 0.27321, "acc": 88.81055, "loss_bbox": 0.34204, "loss": 0.74244, "time": 0.18302}
{"mode": "train", "epoch": 23, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04445, "loss_rpn_cls": 0.04553, "loss_rpn_bbox": 0.07952, "loss_cls": 0.27317, "acc": 88.86523, "loss_bbox": 0.34006, "loss": 0.73827, "time": 0.17671}
{"mode": "train", "epoch": 24, "iter": 50, "lr": 3e-05, "memory": 2994, "data_time": 0.04465, "loss_rpn_cls": 0.04352, "loss_rpn_bbox": 0.07944, "loss_cls": 0.26942, "acc": 89.23633, "loss_bbox": 0.34198, "loss": 0.73437, "time": 0.17527}
{"mode": "val", "epoch": 24, "iter": 21, "lr": 3e-05, "bbox_mAP": 0.394, "bbox_mAP_50": 0.715, "bbox_mAP_75": 0.407, "bbox_mAP_s": 0.06, "bbox_mAP_m": 0.393, "bbox_mAP_l": 0.427, "bbox_mAP_copypaste": "0.394 0.715 0.407 0.060 0.393 0.427"}
